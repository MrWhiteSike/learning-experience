Hive-base-concept

Hive 基本概念

1. 什么是Hive？
Hive 是基于Hadoop的一个数据仓库工具，可以将结构化数据文件映射为一张表，并且提供类SQL查询功能

Hive的本质：将HQL转化成MapReduce程序。
1）Hive处理的数据存储在HDFS
2）Hive分析数据底层的实现是MapReduce
3）执行程序运行在Yarn上

客户端，单节点，不需要建立集群，独立工作的。


Hive元数据中存储了表名和HDFS的路径之间的映射。

提交SQL底层执行流程：
或者说SQL 转 MapReduce 之间的流程：

1）hive搭建的时候

数据仓库通过SQL进行统计分析 --> 
将SQL语言中常用的操作（select，where，group等）用MapReduce写成很多模板 --> 所有的MapReduce模板封装在hive中

2）在客户端，用户根据业务需求编写相应的SQL语句 --> 
 所有的MapReduce模板封装在hive中 -->
 通过Hive框架匹配出相应的MapReduce模板 --> 
 运行MapReduce程序生成相应的分析结果 -->
 得到的分析结果返回给客户端

 Hive的优缺点？

 优点：
 1）操作接口采用类SQL语法，提供快速开发的能力（简单，容易上手）
 2）避免了去写MR，减少开发人员的学习成本
 3）Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合
 4）Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高
 5）Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数

 缺点：
 1）Hive的SQL表达能力有限
 	迭代式算法无法表达
 	数据挖掘方面不擅长，由于MapReduce数据流程的限制，效率更高的算法却无法实现
 2）Hive的效率比较低
 	Hive自动生成的MR作业，通常情况下不够智能化
 	Hive调优比较困难，粒度较粗


Hive 架构：

SQL Parser解析器
Physical Plan 编译器
Query Optimizer 优化器
Execution 执行器

元数据：MetaStore
元数据包括：表名、表所属的数据库，表的拥有者，列 分区字段、表的类型
是否是外部表，表的数据所在目录等。
默认存储在自带的Derby数据库中，推荐使用MySQL存储Metastore

Hadoop
使用HDFS进行存储，使用MR进行计算

驱动器：Driver
解析器（SQL parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如 antlr；对AST进行语法分析，比如表是否存在，字段是否存在、sql语义是否有误。
编译器（Physical Plan）：将AST编译生成逻辑执行计划
优化器（Query Optimizer）：对逻辑执行计划进行优化
执行器（Executor）：把逻辑执行计划转换成可以运行的物理计划。对于hive来说，就是执行MR、spark


Hive 的运行机制：
用户创建table --通过映射关系向表中导数据-->
HDFS(数据文件、数据仓库) --Metastore中记录着表对应文件的path-->
Hive中的元数据MetaStore


Hive 和 数据库的对比？
相同点：
1）查询语言 相似

不同点：
2）数据更新
hive 是针对数据仓库应用设计的，而数据仓库的内容是读多写少的
因此，Hive中不建议对数据的改写，所有的数据都是在加载的时候确定好的的。而数据库中的数据通常是需要进行修改的。
3）执行延迟
Hive在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。另外一个导致hive执行延迟高的因素是MR框架。由于MR本身具有较高的延迟，因此在利用MR执行hive查询时，也会有较高的延迟。相对的，数据库的执行延迟较低。当然，这个低是有条件的，即数据规模较小，当数据规模大到超过数据库的处理能力的时候，hive的并行计算显然能体现出优势。
4）数据规模
由于hive建立在集群上并可以利用MR进行并行计算，因此可以支持很大规模的数据；对应的，数据库可以支持的数据规模较小。



元数据中的映射关系和hdfs上的文件地址，两者缺一不可

创建的先后顺序没有关系，即哪个先创建都可以，只要两者能映射上就可以。

Hive 就是以sql的形式，来操作hdfs存储的数据。





