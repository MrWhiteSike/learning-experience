003-ods

第一章，电商实时数仓分层介绍
	1.为啥要分层
		解耦，提高复用性，复杂需求简单化
		屏蔽数据
	

	普通实时计算与实时数仓比较：

	普通的实时计算：优先考虑时效性，所以从数据采集经过实时计算直接得到结果。
	这样做时效性更好，但是弊端是由于计算过程中的中间结果没有沉淀下来，
	所以当面对大量实时需求的时候，计算的 复用性较差（重复计算，重复劳动），
	开发成本随着需求增加直线上升。

	实时数仓：基于一定的数据仓库理念，对数据处理流程进行规划，分层，目的是提高数据的复用性
		牺牲一定的实效性

	
	2.分了那几层，每一层的作用是什么？
	ODS：原始数据，日志和业务数据 数据存储在Kafka中
	
	DWD：根据数据对象为单位进行分流，比如订单、页面访问等等
		DIM 维度数据存储在HBase
		DWD 事实数据存储在kafka，默认保存7天
		
		维度信息需要长久保存，不能保存到kafka中；
	DIM：维度数据
	
	DWM：对于部分数据对象进行进一步加工，比如，独立访问，跳出行为，也可以和维度进行关联，形成宽表
		依旧是明细数据，存放在kafka中
	DWS：根据某个主题将多个事实数据轻度聚合，形成主图宽表。存放在Clickhouse中
	ADS：把Clickhouse中的数据根据可视化需进行筛选聚合。
	
 	
	
		
		
		

第二章，实时需求概览
	1.离线计算-实时计算的比较
	离线计算-实时计算 ：需求的固定性
	
	即席查询：需求的临时性
	Presto：当场计算（基于内存速度快）
	Kylin:预计算（提前算好），多维分析（hive with Cube ）
	
	2.实时需求种类
		日常统计报表或者分析图中需求
		实时数据大屏监控
		数据预警或者提示
			时效性比较高，离线做没必要了！
		实时推荐系统



第三章，统计架构分析
	离线架构
	
	
	
	实时架构
	
	
	架构分析：
		Sqoop 导入数据的方式
			全量:where  1=1
			增量：where 创建时间=当天
			新增及变化：where 创建时间=当天 or 操作时间=当天
			特殊：只导入一次
		Flume：
			TailDirSource：
				优点：断点续传，监控多目录多文件，实时监控当
				缺点：当文件更名之后会重新读取该文件，造成数据重复。
				注意：
					1.要使用不更名打印日志框架（logback）
					2.修改源码，让TailDirSource判断文件时只看INode值
			KafkaChannel：
				优点：将数据写入kafka，省了一层sink
				KafkaChannel：既是生产者，又是消费者
				用法：
					1.Source-KafkaChannel-sink
					2.Sourc-KafkaChannel
					3.KafkaChannel-sink
			
			逻辑性：数据流，监控，优化，配置信息（优化）。
			逻辑思维+表达能力
			
		Kafka：
			Producer
				ack 0,1，-1
				
				拦截器，序列化器，分区器
				发送流程 sender main
				幂等性，事务
				分区规则--
					1.指定分区则发往指定分区
					2.没有指定分区，则根据key值hash
					3.没有指定分区，也没有key的时候，轮询（粘性分区）
					
			Broker
				Topic：
					副本：高可靠
						ISR：LEO，Hw
					分区：高并发（读写，从生产者消费者角度来说），负载均衡（防止热点，从集群角度来说）
				
			
			Consumer：
				分区分配规则：
				offset保存
					默认： __consumer_offsets 主题，默认50个分区
					其他：手动维护offset(Mysql)，保存数据和保存offset写到一个事务，可以做到精准一次消费
					
					先保存数据，后保存offset   导致重复数据+幂等性（解决精准一次消费）
					先保存offset 后保存数据    导致丢失数据
			
			优化，监控，配置，数据量，峰值速度
				
			
				
	
第四章，日志数据采集
	Canal
第五章，业务数据采集
	FlinkCDC



Nginx集群，为Web 日志服务器做负载均衡
Maxwell介绍
Canal搭建教程




