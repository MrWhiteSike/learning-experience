01-flink-brief-introduction

flink 是一个分布式处理引擎框架，用于对无界和有界数据流进行状态计算。

流数据更真实反映我们的生活方式
传统的数据架构是基于有限数据集的
目标：低延迟，高吞吐，结果的准确性和良好的容错性

目标解释：
批量 ==> 发邮件： 来一批数据处理一批数据，数据积攒的过程，做不到低延迟（毫秒级）
流式 ==> 实时通信，微信聊天；来一条数据处理一条，可以做到低延迟（毫秒级）

如何保证高吞吐，就需要利用分布式的原理，将一个大任务分解为小任务，发送到不同节点上去执行，最终将各个节点的计算结果进行汇总得到最终的计算结果。也可以分布式原理，将数据存放在不同计算节点上，进行分布式计算，来提高吞吐量。

数据乱序，由于网络传输中有延迟导致的，怎么保证计算结果的准确，
如果出错，就从头开始重新计算，这种情况代价较大，所以需要良好的容错性。


处理流数据的涉及行业：要求低延迟，实时性比较高
1）电商和市场营销
	数据报表，广告投放，业务流程
2）物联网（IOT）
	传感器实时数据采集和显示，实时报警，交通运输
3）电信业
	基站流量调配
4）银行和金融业
	实时结算和通知推送，实时检测异常行为


发展演变：
事务数据处理流程 => 保证低延迟，不支持高并发
数仓数据处理 => 不能保证低延迟，支持高吞吐
有状态的流处理
	内存存储状态，周期性保存状态：保证低延迟，不能保证结果准确
	lambda架构: 用两套系统（1、批处理系统 2、流处理系统 ），同时保证低延迟和结果准确；维护和扩展两套系统
	Flink：一套系统，低延迟、高吞吐、保证结果准确，操作简单/表现力好



特点：
1、事件驱动
2、基于流
	在Flink中，一切都是由流组成的，离线数据是有界流；
	实时数据是一个没有界限的流；就是所谓的有界流和无界流。
3、分层API
	越顶层越抽象，表达含义越简明，使用越方便
	越底层越具体，表达能力越丰富，使用越灵活

	ProcessFunction（events，state，time）=> DataStream API(streams,windows) => SQL/Table API (dynamic tables)

	低 ------------> 高
4、支持事件时间（evevt-time）和处理时间（processing-time）
5、精确一次（exactly-once）的状态一致性保证
6、低延迟，每秒处理数百万个事件，毫秒级延迟
7、与众多常用存储系统的连接
8、高可用，动态扩展，实现7*24小时全天候运行



Flink Vs SparkStreaming

1）流（stream） 和 微批（micro-batching）

数据模型
 spark采用RDD模型，spark streaming的DStream实际上也就是一组组小批数据RDD的集合

 flink基本数据模型是数据流，以及事件（Event）序列

运行时架构
	spark是批计算，将DAG划分为不同的stage，一个完成后才可以计算下一个
	flink是标准的流执行模式，一个事件在一个节点处理完后可以直接发往下一个节点进行处理



解决 Flink 升级1.11 报错 No ExecutorFactory found to execute the application：
https://blog.csdn.net/qq_41398614/article/details/107553604









