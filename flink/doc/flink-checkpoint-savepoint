flink-checkpoint-savepoint


一致性检查点（checkpoint）
	1）Flink故障恢复机制的核心，就是应用状态的一致性检查点
	2）有状态流应用的一致检查点，其实就是所有任务的状态，在某个时间点的一份拷贝（一份快照）；这个时间点，应该是所有任务都恰好处理完一个相同的输入数据的时候


从检查点恢复状态
	1）在执行流应用程序期间，Flink会定期保存状态的一致检查点
	2）如果发生故障，Flink将会使用最近的检查点来一致恢复应用程序的状态，并重新启动处理流程


	遇到故障之后：
	1）就是重启应用
	2）从checkpoint中读取状态，将状态重置
	从检查点重新启动应用程序后，其内部状态与检查点完成时的状态完全相同
	3）开始消费并处理检查点到发生故障之间的所有数据
	这种检查点到保存和恢复机制可以为应用程序状态提供“精确一次”（exactly-once）的一致性，因为所有算子都会保存检查点并恢复其所有状态，这样一来所有的输入流就都会被重置到检查点完成时的位置。

检查点算法
1）一种简单的想法
	暂停应用，保存状态到检查点，再重新恢复应用
2）Flink的改进实现
	1、基于Chandy-Lamport算法的分布式快照（每个进行快照，最后进行合并每个快照）
	2、将检查点的保存和数据处理分离开，不暂停整个应用
3）检查点分界线（Checkpoint Barrier）
	1、Flink的检查点算法用到了一种称为分界线（Barrier）的特殊数据形式，用来把一条流上的数据按照不同检查点分开
	2、分界线之前到来的数据导致的状态更改，都会被包含在当前分界线所属的检查点中；而基于分界线之后的数据导致的所有更改，就会被包含在之后的检查点中
	3、分界线对齐：Barrier向下游传递，任务会等待所有输入分区的Barrier到达
	4、对于Barrier已经达到的分区，继续到达的数据会被缓存
	5、而Barrier尚未到达的分区，数据会被正常处理
	6、当收到所有输入分区的Barrier时，任务就将其状态保存到状态后端的检查点中，然后将Barrier继续向下游转发
	7、向下游转发检查点Barrier后，任务继续正常的数据处理
	8、下游任务向JobManager确认状态保存到checkpoint完毕
	9、当所有任务都确认已经成功将状态保存到检查点时，检查点就真正完成了。


保存点 （save points）

Flink还提供了可以自定义的镜像保存功能，就是保存点

原则上，创建保存点使用的算法与检查点完全相同，因此保存点可以认为就是具有一些额外元数据的检查点

Flink不会自动创建保存点，因此用户（或者外部调度程序）必须明确触发创建操作

保存点是一个强大的功能，除了故障恢复外，保存点可以用于：有计划的手动备份，更新应用程序，版本迁移，暂停和重启应用，等等。





