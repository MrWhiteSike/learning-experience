flink-table-window


时间语义，要配合窗口操作才能发挥作用。
在Table API和SQL中，主要有两种窗口
Group Windows（分组窗口）
根据时间戳或行计数间隔，将行聚合到有限的组（Group）中，并对每个组的数据执行一次聚合函数
Over Windows
针对每个输入行，计算相邻行范围内的聚合

1、GroupWindow
Group Windows 是使用 window（w:GroupWindow）子句定义的，并且必须由as子句指定一个别名。
为了按窗口对表进行分组，窗口的别名必须在 group by 子句中，像常规的分组字段一样引用
	例如：
	Table table = input
	.window([w:GroupWindow] as "w") // 定义窗口，别名为w
	.groupBy("w, a") // 按照字段 a和窗口 w分组
	.select("a,b.sum"); // 聚合
（1）Table API 提供了一组具有特定语义的预定义 Window 类，这些类会被转换为底层 DataStream 或 DataSet 的窗口操作

	分组窗口分为三种：

	1）滚动窗口(Tumbling windows)
		滚动窗口（Tumbling windows）要用Tumble类来定义
		// Tumbling Event-time Window（事件时间字段rowtime）
		.window(Tumble.over("10.minutes").on("rowtime").as("w"))

		// Tumbling Processing-time Window（处理时间字段proctime）
		.window(Tumble.over("10.minutes").on("proctime").as("w"))

		// Tumbling Row-count Window (类似于计数窗口，按处理时间排序，10行一组)
		.window(Tumble.over("10.rows").on("proctime").as("w"))


		说明：
			over：定义窗口长度
			on：用来分组（按时间间隔）或者排序（按行数）的时间字段
			as：别名，必须出现在后面的groupBy中

	2）滑动窗口(Sliding windows)
		滑动窗口（Sliding windows）要用Slide类来定义
		// Sliding Event-time Window
		.window(Slide.over("10.minutes").every("5.minutes").on("rowtime").as("w"))

		// Sliding Processing-time window 
		.window(Slide.over("10.minutes").every("5.minutes").on("proctime").as("w"))

		// Sliding Row-count window
		.window(Slide.over("10.rows").every("5.rows").on("proctime").as("w"))

		说明：
			over：定义窗口长度
			every：定义滑动步长
			on：用来分组（按时间间隔）或者排序（按行数）的时间字段
			as：别名，必须出现在后面的groupBy中

	3）会话窗口(Session windows)
		会话窗口（Session windows）要用Session类来定义
		// Session Event-time Window
		.window(Session.withGap("10.minutes").on("rowtime").as("w"))

		// Session Processing-time Window 
		.window(Session.withGap("10.minutes").on("proctime").as("w"))

		说明：
			withGap：会话时间间隔
			on：用来分组（按时间间隔）或者排序（按行数）的时间字段
			as：别名，必须出现在后面的groupBy中

（2）SQL中的Group Windows
	Group Windows定义在SQL查询的Group By子句中
	TUMBLE(time_attr, interval)
		定义一个滚动窗口，每一个参数是时间字段，第二个参数是窗口长度
	HOP(time_attr，interval，interval)
		定义一个滑动窗口，第一个参数是时间字段，第二个参数是窗口滑动步长，第三个是窗口长度
	SESSION(time_attr，interval)
		定义一个绘画窗口，第一个参数是时间字段，第二个参数是窗口间隔



2、OverWindow

Over window 聚合是标准 SQL 中已有的（over 子句），可以在查询的 SELECT 子句中定义
Over window 聚合，会针对每个输入行，计算相邻行范围内的聚合
Over windows 使用 window（w:overwindows*）子句定义，并在 select（）方法中通过别名来引用

Table table = input
.window([w: OverWindow] as "w")
.select("a, b.sum over w, c.min over w");

（1）Table API 提供了 Over 类，来配置 Over 窗口的属性

	1）无界Over Windows:
	可以在事件时间或处理时间，以及指定为时间间隔、或行计数的范围内，定义 Over windows
	无界的 over window 是使用常量(UNBOUNDED_RANGE)指定的

		// 无界的事件时间over window (时间字段 "rowtime")
		.window(Over.partitionBy("a").orderBy("rowtime").preceding(UNBOUNDED_RANGE).as("w"))

		//无界的处理时间over window (时间字段"proctime")
		.window(Over.partitionBy("a").orderBy("proctime").preceding(UNBOUNDED_RANGE).as("w"))

		// 无界的事件时间Row-count over window (时间字段 "rowtime")
		.window(Over.partitionBy("a").orderBy("rowtime").preceding(UNBOUNDED_ROW).as("w"))

		//无界的处理时间Row-count over window (时间字段 "rowtime")
		.window(Over.partitionBy("a").orderBy("proctime").preceding(UNBOUNDED_ROW).as("w"))
		其中 partitionBy是可选项。

	2）有界Over Windows ：
	有界的over window是用间隔的大小指定的
		// 有界的事件时间over window (时间字段 "rowtime"，之前1分钟)
		.window(Over.partitionBy("a").orderBy("rowtime").preceding("1.minutes").as("w"))

		// 有界的处理时间over window (时间字段 "rowtime"，之前1分钟)
		.window(Over.partitionBy("a").orderBy("porctime").preceding("1.minutes").as("w"))

		// 有界的事件时间Row-count over window (时间字段 "rowtime"，之前10行)
		.window(Over.partitionBy("a").orderBy("rowtime").preceding("10.rows").as("w"))

		// 有界的处理时间Row-count over window (时间字段 "rowtime"，之前10行)
		.window(Over.partitionBy("a").orderBy("proctime").preceding("10.rows").as("w"))


（2）SQL中的Over Windows

	用 Over 做窗口聚合时，所有聚合必须在同一窗口上定义，也就是说必须是相同的分区、排序和范围
	目前仅支持在当前行范围之前的窗口
	ORDER BY 必须在单一的时间属性上指定

	SELECT COUNT(amount) OVER (
	  PARTITION BY user
	  ORDER BY proctime
	  ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)
	FROM Orders

	// 也可以做多个聚合
	SELECT COUNT(amount) OVER w, SUM(amount) OVER w
	FROM Orders
	WINDOW w AS (
	  PARTITION BY user
	  ORDER BY proctime
	  ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)



